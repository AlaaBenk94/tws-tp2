let clickX = [],
    clickY = [],
    clickDrag = [],
    paint = false;

function addClick(x, y, dragging) {
    clickX.push(x);
    clickY.push(y);
    clickDrag.push(dragging);
}

function redraw(refCanvas) {
    let context = refCanvas.getContext('2d'),
        width = refCanvas.getBoundingClientRect().width,
        height = refCanvas.getBoundingClientRect().height;

    refCanvas.setAttribute('width', width);
    refCanvas.setAttribute('height', height);

    context.clearRect(0, 0, context.width, context.height); // Clears the canvas

    context.strokeStyle = "#df4b26";
    context.lineJoin = "round";
    context.lineWidth = 2;

    for (let i = 0; i < clickX.length; i++) {
        context.beginPath();
        if (clickDrag[i] && i) {
            context.moveTo(clickX[i - 1] * width, clickY[i - 1] * height);
        } else {
            context.moveTo((clickX[i] * width) - 1, clickY[i] * height);
        }
        context.lineTo(clickX[i] * width, clickY[i] * height);
        context.closePath();
        context.stroke();
    }
}

function pointerDownHandler(ev) {
    let refCanvas = ev.target;
    console.error('HEY ! ICI ON PEUT DIFFERENCIER QUEL TYPE DE POINTEUR EST UTILISE !');

    let width = refCanvas.getBoundingClientRect().width,
        height = refCanvas.getBoundingClientRect().height,
        mouseX = (ev.pageX - refCanvas.offsetLeft) / width,
        mouseY = (ev.pageY - refCanvas.offsetTop) / height;

    paint = true;
    addClick(mouseX, mouseY, false);
    redraw(refCanvas);
}

function pointerMoveHandler(ev) {
    let refCanvas = ev.target;
    if (paint) {
        let width = refCanvas.getBoundingClientRect().width,
            height = refCanvas.getBoundingClientRect().height;
        addClick((ev.pageX - refCanvas.offsetLeft) / width, (ev.pageY - refCanvas.offsetTop) / height, true);
        redraw(refCanvas);
    }
}

function pointerUpEvent(ev) {
    paint = false;
}

function setPoints(drawing, canvas) {
    clickX = drawing.clickX;
    clickY = drawing.clickY;
    clickDrag = drawing.clickDrag;
    redraw(canvas);
}

export {addClick, pointerDownHandler, pointerMoveHandler, pointerUpEvent, setPoints,
        clickX, clickY, clickDrag};
